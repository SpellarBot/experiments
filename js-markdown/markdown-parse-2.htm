<!DOCTYPE html>
<html lang="en" >
 <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<meta name="description" content="">
	<meta name="author" content="Andrew Ippoliti">
	<title>Markdown Parser</title>
	<style type="text/css">
		body { position: absolute; top: 0; left: 0; right: 0; bottom:0; }
		.left-column { position: absolute; left: 0; right: 50%; top:0;bottom:0; }
		.right-column { position: absolute; left: 50%; right: 0; top:0;bottom:0; }
		#in-markdown {width: 100%; height: 100%;}
		#output {width: 100%; height: 100%; overflow: scroll;}
		
	</style>
 </head>
 <body >
<div class="left-column">
<textarea id="in-markdown">
# H1 - Sample Markdown Stuff

This is *my* implementation of Markdown. Why is mine better?

1. Easily customizable
2. I wrote it
3. And all that

Let's try some bulletted lists:

- Don't get messed up!
+ This is good
* What is 3+5*2-1?
+ Oh snap this this
  is spanning multiple lines...

What does the code look like?

	function parse_markdown(str){
		// BLAH!
	}

Another Section
---------------

What did you say?

> The rain in spain stays mainly in the plain.

This paragraphs is going to test how well I can
*emphasize* things. I can also **really stress** something
or put ***bold** in italics* or ***italics* in bold**. Did
I mention I can ***emphasize my stressing***? And I know 
how to multiply: 5*2 = 2*5.

I can also write stuff with some inline `code`. Just use a 
backtick. What is `5*7`? `5*7=7*5` and it also equals the
same thing with spaces: `5*7=7*5`.

</textarea>
</div>

<div class="right-column">
<div id="output" ></div>
</div>

<script type="text/javascript">

var markdown_options = {
	tab:     '    ',
	newline: '\n',
	start_block_quote: '>',
	start_block_code: '    ',
	start_block_list: '*',
	start_block_paragraph: ''
};

function markdown_normalize_whitespace(str){
	// Are their any systems that have just \r ?
	return str.replace(/\r/g,'')
	          .replace(/\t/g,'    '); // should make this a parameter
}

function markdown_clean_whitespace(str){
	// Normals and removes newlines (\n\r, \r\n -> \n -> ' ')
	// Combines continuous whitespace into single whitespace
	// Trims leading/trailing whitespace
	return str.replace(/\r/g,'')
	          .replace(/\n/g,' ')
	          .replace(/\s+/g,' ')
	          .replace(/^\s+|\s+$/g,'');
}

function markdown_escape(str){
	return str.replace(/&/g,'&amp;')
	          .replace(/>/g,'&gt;')
	          .replace(/</g,'&lt;')
	          .replace(/"/g,'&quot;')
	          .replace(/'/g,'&#39;');
}

function markdown_format_inline(str){
	return str.replace(/([\s.,;"'!?]?)\*{3}(\S{1,2}|\S[^*]+?\S)\*{3}([\s.,;"'!?])/g,'$1<em><strong>$2</strong></em>$3')
	          .replace(/([\s.,;"'!?]?)\*{2}(\S{1,2}|\S[^*]+?\S)\*{2}([\s.,;"'!?])/g,'$1<strong>$2</strong>$3')
	          .replace(/([\s.,;"'!?]?)\*{1}(\S{1,2}|\S[^*]+?\S)\*{1}([\s.,;"'!?])/g,'$1<em>$2</em>$3')
	          .replace(/([\s.,;"'!?]?)`{1}(\S{1,2}|\S[^`]+?\S)`{1}([\s.,;"'!?])/g,'$1<code>$2</code>$3');
}

function markdown_get_anchor_references(str){
	var reAnchorReference = /\[[\s\S]+?\]:/;
}

function parse_markdown(str){
	var results = [];
	var isDone = 0;
	var match;

	var maxIter = 99;

	while( ! isDone && maxIter-- ){

		//console.info(str);
		
		isDone = 1;

		var reSingleHeader = /(^#{1,6})\s*([\s\S]+?)#*\n/;
		if( reSingleHeader.test(str) ){
			isDone = 0;
			match = reSingleHeader.exec(str);
			var header_level = match[1].length;
			var header_text = markdown_clean_whitespace(match[2]);
			header_text = markdown_escape(header_text);
			results.push(['H'+header_level, header_text]);
			str = str.replace(reSingleHeader,'');
			continue;
		}

		var reMultiHeader = /^([^\n]+?)\n(=|-|\*|\^|`|')\2{3,}\n/;
		if( reMultiHeader.test(str) ){
			isDone = 0;
			match = reMultiHeader.exec(str);
			var header_level = 0;
			if(match[2] === '='){ header_level = 1; }else
			if(match[2] === '-'){ header_level = 2; }else
			if(match[2] === '*'){ header_level = 3; }else
			if(match[2] === '^'){ header_level = 4; }else
			if(match[2] === '`'){ header_level = 5; }else
			if(match[2] === "'"){ header_level = 6; }
			var header_text = markdown_clean_whitespace(match[1]);
			header_text = markdown_escape(header_text);
			results.push(['H'+header_level, header_text]);
			str = str.replace(reMultiHeader,'');
			continue;
		}

		var reBullets = /^(-|\+|\*)([\s\S]+?)\n\n/;
		if( reBullets.test(str) ){
			isDone = 0;
			match = reBullets.exec(str);
			var bullet_type = match[1];
			var block_text = match[2];
			var bullet_items = block_text.split(/^-|^\+|^\*/gm);
			var n_bullets = bullet_items.length;
			var i;
			for( var i=0; i<n_bullets; i+=1 ){
				// Clean the text (and escape)
				bullet_items[i] = markdown_clean_whitespace(bullet_items[i]);
				bullet_items[i] = markdown_escape(bullet_items[i]);
				bullet_items[i] = markdown_format_inline(bullet_items[i]);
			}
			results.push(['UL',bullet_items]);
			str = str.replace(reBullets,'');
			continue;
		}

		var reList = /^(\d+|[IVXLCDM]+|[ivxlcdm]+|[a-z]+|[A-Z]+)(?:\.\)|\.+|\))([\s\S]+?)\n\n/;
		if( reList.test(str) ){
			isDone = 0;
			match = reList.exec(str);
			var label_type = match[1];
			var block_text = match[2];
			var list_items = block_text.split(/(?:\d+|[IVXLCDM]+|[ivxlcdm]+|[a-z]+|[A-Z]+)(?:\.\)|\.+|\))/g);
			var n_items = list_items.length;
			var i;
			for( var i=0; i<n_items; i+=1 ){
				// Clean the text (and escape)
				list_items[i] = markdown_clean_whitespace(list_items[i]);
				list_items[i] = markdown_escape(list_items[i]);
				list_items[i] = markdown_format_inline(list_items[i]);
			}
			results.push(['OL',list_items]);
			str = str.replace(reList,'');
			continue;
		}

		var reQuote = /^>([\s\S]+?)\n\n/;
		if( reQuote.test(str) ){
			isDone = 0;
			match = reQuote.exec(str);
			var text = match[1];
			text = text.replace(/^>/gm,'');
			text = markdown_clean_whitespace(text);
			text = markdown_escape(text);
			text = markdown_format_inline(text);
			// and look for inline stuff...
			results.push(['BLOCKQUOTE', text]);
			str = str.replace(reQuote,'');
			continue;
		}

		var reCode = /^(\t| {4})([\s\S]+?)\n\n/;
		if( reCode.test(str) ){
			isDone = 0;
			match = reCode.exec(str);
			var text = match[2];
			text = text.replace(/^(\t| {4})/gm,'');
			text = text.replace(/\r/g,'');
			text = markdown_escape(text);
			//text = text.replace(/\n/g,' ');
			//text = text.replace(/ +/g,' ');
			// escape text too...
			// and look for inline stuff...
			results.push(['CODE', text]);
			str = str.replace(reCode,'');
			continue;
		}

		var reParagraph = /^([\s\S]+?)\n\n/;
		if( reParagraph.test(str) ){
			isDone = 0;
			match = reParagraph.exec(str);
			var text = match[1];
			text = markdown_clean_whitespace(text);
			text = markdown_escape(text);
			text = markdown_format_inline(text);
			// escape text too...
			// and look for inline stuff...
			results.push(['P', text]);
			str = str.replace(reParagraph,'');
			continue;
		}

		
	}

	return results;
	
	// console.info(results);
};

function make_html(markdown){
	var i, node, l = markdown.length;
	var html = '';
	for( i=0; i<l; i+=1 ){
		node = markdown[i];
		if( node[0] === 'H1' ){ html += '<h1>'+node[1]+'</h1>\n'; }else
		if( node[0] === 'H2' ){ html += '<h2>'+node[1]+'</h2>\n'; }else
		if( node[0] === 'H3' ){ html += '<h3>'+node[1]+'</h3>\n'; }else
		if( node[0] === 'H4' ){ html += '<h4>'+node[1]+'</h4>\n'; }else
		if( node[0] === 'H5' ){ html += '<h5>'+node[1]+'</h5>\n'; }else
		if( node[0] === 'H6' ){ html += '<h6>'+node[1]+'</h6>\n'; }else
		if( node[0] === 'P' ){ html += '<p>'+node[1]+'</p>\n'; }else
		if( node[0] === 'BLOCKQUOTE' ){ html += '<blockquote>'+node[1]+'</blockquote>\n'; }else
		if( node[0] === 'CODE' ){ html += '<pre><code>'+node[1]+'</code></pre>\n';}else
		if( node[0] === 'UL' ){
			html += '<ul>\n';
			var j, n = node[1].length;
			for( j=0; j<n; j+=1 ){
				html += '\t<li>'+node[1][j]+'</li>\n';
			}
			html += '</ul>\n';
		}else
		if( node[0] === 'OL' ){
			html += '<ol>\n';
			var j, n = node[1].length;
			for( j=0; j<n; j+=1 ){
				html += '\t<li>'+node[1][j]+'</li>\n';
			}
			html += '</ol>\n';
		}
	}
	return html;
}

function do_update(){
	var str = document.getElementById('in-markdown').value;
	var markdown = parse_markdown(str);
	console.info(markdown);
	var html = make_html(markdown);
	document.getElementById('output').innerHTML = html;
}

onload = function(){
	document.getElementById('in-markdown').onchange = do_update;
	parse_markdown("# H1 Text\n");
	parse_markdown("## H2 Text\n");
	parse_markdown("### H3 Text\n");
	parse_markdown("#### H4 Text\n");
	parse_markdown("##### H5 Text\n");
	parse_markdown("###### H6 Text\n");

	parse_markdown("# H1 Text\n## H2 Text\n");
	console.info(parse_markdown("Heading 1\n=========\nHeading 2\n---------\nHeading 3\n*********\nHeading 4\n^^^^^^^^^\nHeading 5\n`````````\nHeading 6\n'''''''''\n\n"));

	parse_markdown("This is a \nparagraph that is\nsplit onto multiple\nlines\n\n");
	parse_markdown("This is a \nparagraph that is\nsplit onto multiple\nlines\n\nThis is a \nparagraph that is\nsplit onto multiple\nlines\n\nThis is a \nparagraph that is\nsplit onto multiple\nlines\n\n");

	parse_markdown("# Some heading...\nThis is a \nparagraph that is\nsplit onto multiple\nlines\n\n");

	parse_markdown("- One\n- Two\n- THree\n\n");
	parse_markdown("+ One\n- Two\n* THree\n- Four\n\n");
	parse_markdown("+ One\n- Two\n* THree\n- Four\n\n+More\n+More\n\n");

	parse_markdown("1.) One\n1.) Two\n1.) Three\n1.) Four\n\n0)More\n0)More\n\n");

	parse_markdown(">This is a quote\n>that spans multiple\n>lines with a '>'\n> at the start of each line\n\n");

	parse_markdown(">This is a quote\n that spans multiple\n lines but does not \n have a '>' at the start of each line\n\n");

	parse_markdown("\tThis is some code\n\t that spans multiple\n\t lines\n\n");

	
}

</script>
</body>