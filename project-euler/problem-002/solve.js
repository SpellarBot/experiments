/** Even Fibonacci numbers
 * Each new term in the Fibonacci sequence is generated by adding the
 * previous two terms. By starting with 1 and 2, the first 10 terms will be:
 *
 *     1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not
 * exceed four million, find the sum of the even-valued terms.
 */

// returns the nth fibbonacci number (recursively)
function fib_r(n){
	if( n === 0 ){
		return 1;
	}else if( n === 1 ){
		return 2;
	}else{
		return fib_r( n-1 ) + fib_r( n-2 );
	}
}

// Check that fib_r works
var r,results = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89];
var i,l=results.length; 
for( i=0; i<l; i+=1 ){
	r = fib_r(i);
	if( r !== results[i] ){
		throw new Error( 'fib_r does not work for n='+i );
	}
}
console.info( 'fib_r correct upto the '+l+'th fibonacci number' );

// use a formula to compute the n'th fibonacci number
// note that we need to shift it by 2 to agree with the definition above
function fib_phi(n){
	n += 2;
	var sqrt5 = Math.sqrt(5.0);
	var phi_p = (1.0+Math.sqrt(5.0))*0.5;
	var phi_n = (1.0-Math.sqrt(5.0))*0.5;
	return Math.round( (1.0/sqrt5) * (Math.pow(phi_p,n)-Math.pow(phi_n,n)) );
}

var i,l=results.length; 
for( i=0; i<l; i+=1 ){
	r = fib_phi(i);
	if( r !== results[i] ){
		console.info( 'fib_phi does not work for n='+i+' - ('+r+','+results[i]+')' );
	}
}
console.info( 'if no comments above, fib_phi is correct upto the '+l+'th fibonacci number' );

// iterative version (not recursive)
// note that we need to shift it by 2 to agree with the definition above
function fib_i(n){
	n += 2;

	// previous (nth-1) number and current (nth-0) number
	var n1 = -1;
	var n0 = 1;

	// sum is for temp storing the sum of the last 2 numbers in the sequence
	var sum, i;
	for( i=0; i<=n; i++ ){
		sum = n0 + n1;
		n1 = n0;
		n0 = sum;
	}

	return n0;
}

var i,l=results.length; 
for( i=0; i<l; i+=1 ){
	r = fib_i(i);
	if( r !== results[i] ){
		console.info( 'fib_i does not work for n='+i+' - ('+r+','+results[i]+')' );
	}
}
console.info( 'if no comments above, fib_i is correct upto the '+l+'th fibonacci number' );


// iterate over the fibonacci sequene adding the even ones
function solve(upperLimit){

	// index in the fibonacci sequence
	var probSum = 0;

	// previous (nth-1) number and current (nth-0) number
	var fib_n1 = -1;
	var fib_n0 = 1;

	// sum is for temp storing the sum of the last 2 numbers in the sequence
	var fib_sum;
	while( fib_n0 <= upperLimit ){
		fib_sum = fib_n0 + fib_n1;
		fib_n1 = fib_n0;
		fib_n0 = fib_sum;

		// if even add it to the sum
		if( fib_n0 % 2 === 0 ){
			probSum += fib_n0;
		}
	}

	return probSum;
	
}

console.info( solve(4000000) );

// A more generic function which let's you specify an action to apply to
// each number in the fibonacci sequence
function iter_fib( upperLimit, action, state ){

	// previous (nth-1) number and current (nth-0) number
	var fib_n1 = -1;
	var fib_n0 = 1;

	// sum is for temp storing the sum of the last 2 numbers in the sequence
	var fib_sum;
	while( fib_n0 <= upperLimit ){
		fib_sum = fib_n0 + fib_n1;
		fib_n1 = fib_n0;
		fib_n0 = fib_sum;

		// perform the action
		state = action( fib_n0, state );
	}

	return state
}

var state = {sum:0};
console.info( iter_fib( 4000000, function(num,state){
	if( num % 2 === 0 ){
		state.sum += num;
	}
	return state;
},state).sum );

/** 4613732
 *
 * Congratulations, the answer you gave to problem 2 is correct.
 *
 * You are the 319937th person to have solved this problem.
 */
