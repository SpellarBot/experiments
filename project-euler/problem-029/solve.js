/** Distinct powers
 * 
 * Consider all integer combinations of a**b for
 * 2 <= a <= 5 and 2 <= b <= 5:
 * 
 *     2**2=4, 2**3=8, 2**4=16, 2**5=32
 *     3**2=9, 3**3=27, 3**4=81, 3**5=243
 *     4**2=16, 4**3=64, 4**4=256, 4**5=1024
 *     5**2=25, 5**3=125, 5**4=625, 5**5=3125
 * 
 * If they are then placed in numerical order, with any repeats removed,
 * we get the following sequence of 15 distinct terms:
 * 
 * 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 * 
 * How many distinct terms are in the sequence generated by a**b for
 * 2 <= a <= 100 and 2 <= b <= 100?
 */

// BIG NUMBERS (from problem 20)

function big_num_reverse( digits ){
	var nDigits = digits.length;
	var half = Math.floor(nDigits/2);
	var s,i,j;
	for( i=0, j=nDigits-1; i<half; i+=1,j-=1 ){
		s = digits[i];
		digits[i] = digits[j];
		digits[j] = s;
	}
	return digits;
}

function big_num_add( self, other, base ){
	var nSelf = self.length;
	var nOther = other.length;

	// Create A and B the result will always be in A
	// which is a copy of the bigger one
	if( nSelf >= nOther ){
		var a = self;
		var b = other;
	}else{
		var a = other;
		var b = self;
	}
	var al = a.length;
	var bl = b.length;

	var sum = [];
	for( var i=0; i<al; i+=1 ){
		sum.push( a[i] );
	}

	for( var i=0; i<bl; i+=1 ){
		sum[i] += b[i];
	}

	return big_num_flatten_carries( sum, base );

}

function big_num_flatten_carries( digits, base ){
	if( ! base ){ base = 10; }
	var maxDigit = base-1;

	for( var i=0; i<digits.length; i+=1 ){
		var d = digits[i];
		// pad with 0's when needed
		if( d > maxDigit && i+1 === digits.length ){
			digits.push(0);
		}
		while( d > maxDigit ){
			d -= base;
			digits[i+1] += 1;
		}
		digits[i] = d;
	}

	return digits;
}

function big_num_print( digits, base ){
	var print_digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');
	var str = '';
	var d,i=digits.length;
	while( i-- ){
		str += print_digits[ digits[i] ];
	}
	return str.replace(/^0+/,'');
}
function big_num_from_string( str, base ){
	if( ! base ){ base = 10; }
	var big_num = [];
	var digits = str.split('');
	var i, nDigits = digits.length;
	for( i=0; i<nDigits; i+=1 ){
		big_num.push( parseInt(str[i],base) );
	}
	return big_num_reverse( big_num );
}

function big_num_mul_little( big, little, base ){
	var nDigits = big.length;
	for( var i=0; i<nDigits; i+=1 ){
		big[i] *= little;
	}
	return big_num_flatten_carries( big, base );
}

function big_num_factorial( n, base ){
	var num = big_num_from_string( '1', base );
	var i = n+1;
	while( --i ){
		num = big_num_mul_little( num, i, base );
	}
	return num;
}

function big_num_copy( big_num ){
	var copy = [];
	var i,l=big_num.length;
	for( var i=0; i<l; i+=1 ){
		copy.push( big_num[i] );
	}
	return copy;
}

// added 
function big_num_pow_littles( a, b, base ){
	var result = big_num_from_string( '1', base );
	var i = b;
	while( i-- ){
		big_num_mul_little( result, a, base );
	}
	return result;
}

function unique( elements ){

	// js objects only allow unique ids; we'll store each value
	// in the array as it's own key-value pair since duplicates
	// are not allowed: we'll get a set of unique elements
	var hash = {};
	var i = elements.length;
	while( i-- ){
		hash[ elements[i] ] = elements[i];
	}

	// Convert the object back to an array
	var unique = [];
	for( var o in hash ){
		if( hash.hasOwnProperty( o ) ){
			unique.push( hash[o] );
		}
	}

	return unique;
}

function solve( aMin, aMax, bMin, bMax ){
	var base = 10;
	var nums = [];
	for( var a=aMin; a<=aMax; a+=1 ){
		for( var b=bMin; b<=bMax; b+=1 ){
			nums.push(
				big_num_print( big_num_pow_littles( a, b, base ), base )
			);
		}
	}
	return unique(nums).length;
}

console.info( solve(2,5,2,5) );
console.info( solve(2,100,2,100) );

/** 9183
 * Congratulations, the answer you gave to problem 29 is correct.
 * 
 * You are the 54695th person to have solved this problem.
 */
